// Generated by CoffeeScript 1.10.0
(function() {
  var API_ROUTE, TestRail, request;

  request = require("request");

  API_ROUTE = "/index.php?/api/v2/";

  TestRail = (function() {
    function TestRail(host, user, password) {
      this.host = host;
      this.user = user;
      this.password = password;
    }

    TestRail.prototype.getFullHostName = function() {
      return this.host + API_ROUTE;
    };

    TestRail.prototype.closeCommand = function(command, id, callback) {
      return request.post({
        uri: this.getFullHostName() + command + id,
        headers: {
          "content-type": "application/json"
        }
      }, function(err, res, body) {
        return callback(body);
      }).auth(this.user, this.password, true);
    };

    TestRail.prototype.getIdCommand = function(command, id, callback) {
      return request.get({
        uri: this.getFullHostName() + command + id,
        headers: {
          "content-type": "application/json"
        }
      }, function(err, res, body) {
        return callback(body);
      }).auth(this.user, this.password, true);
    };

    TestRail.prototype.getCommand = function(command, callback) {
      return request.get({
        uri: this.getFullHostName() + command,
        headers: {
          "content-type": "application/json"
        }
      }, function(err, res, body) {
        return callback(body);
      }).auth(this.user, this.password, true);
    };

    TestRail.prototype.getExtraCommand = function(command, id, extra, callback) {
      return request.get({
        uri: this.getFullHostName() + command + id + extra,
        headers: {
          "content-type": "application/json"
        }
      }, function(err, res, body) {
        return callback(body);
      }).auth(this.user, this.password, true);
    };

    TestRail.prototype.addCommand = function(command, id, postData, callback) {
      return request.post({
        uri: this.getFullHostName() + command + id,
        headers: {
          "content-type": "application/json"
        },
        body: postData
      }, function(err, res, body) {
        return callback(body);
      }).auth(this.user, this.password, true);
    };

    TestRail.prototype.addExtraCommand = function(command, id, extra, postData, callback) {
      return request.post({
        uri: this.getFullHostName() + command + id + extra,
        headers: {
          "content-type": "application/json"
        },
        body: postData
      }, function(err, res, body) {
        return callback(body);
      }).auth(this.user, this.password, true);
    };

    TestRail.prototype.sendCommand = function(projectID, command, json) {
      return request.post({
        uri: this.host + "/index.php?/api/v2/" + command + projectID,
        headers: {
          "content-type": "application/json"
        },
        body: JSON.stringify(json)
      }, function(err, res, body) {
        return res.body;
      }).auth(this.user, this.password, true);
    };

    TestRail.prototype.constructPostData = function(status_id, comment, test_id, seconds) {
      var post_data;
      post_data = {};
      post_data.status_id = status_id;
      post_data.comment = comment;
      post_data.elapsed = seconds + "s";
      return JSON.stringify(post_data);
    };

    TestRail.prototype.getCase = function(case_id, callback) {
      return this.getIdCommand("get_case/", case_id, callback);
    };

    TestRail.prototype.getCases = function(project_id, suite_id, section_id, callback) {
      if (section_id != null) {
        return this.getExtraCommand("get_cases/", project_id, "&suite_id=" + suite_id + "&section_id=" + section_id, callback);
      } else {
        return this.getExtraCommand("get_cases/", project_id, "&suite_id=" + suite_id, callback);
      }
    };

    TestRail.prototype.addCase = function(section_id, title, type_id, project_id, estimate, milestone_id, refs, callback) {
      var json;
      json = {};
      json.title = title;
      json.type_id = type_id;
      json.project_id = project_id;
      json.estimate = estimate;
      json.milestone_id = milestone_id;
      json.refs = refs;
      return this.addCommand("add_case/", section_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.updateCase = function(case_id, title, type_id, project_id, estimate, milestone_id, refs, callback) {
      var json;
      json = {};
      json.title = title;
      json.type_id = type_id;
      json.project_id = project_id;
      json.estimate = estimate;
      json.milestone_id = milestone_id;
      json.refs = refs;
      return this.addCommand("update_case/", case_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.deleteCase = function(case_id, callback) {
      return this.closeCommand("delete_case/", case_id, callback);
    };

    TestRail.prototype.getCaseFields = function(callback) {
      return this.getCommand("get_case_fields/", callback);
    };

    TestRail.prototype.getCaseTypes = function(callback) {
      return this.getCommand("get_case_types/", callback);
    };

    TestRail.prototype.getConfigs = function(project_id, callback) {
      return this.getIdCommand("get_configs/", project_id, callback);
    };

    TestRail.prototype.getMilestone = function(milestone_id, callback) {
      return this.getIdCommand("get_milestone/", milestone_id, callback);
    };

    TestRail.prototype.getMilestones = function(project_id, callback) {
      return this.getIdCommand("get_milestones/", project_id, callback);
    };

    TestRail.prototype.addMilestone = function(project_id, name, description, due_on, callback) {
      var json;
      json = {};
      json.name = name;
      json.description = description;
      json.due_on = due_on;
      return this.addCommand("add_milestone/", project_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.updateMilestone = function(milestone_id, name, description, due_on, is_completed, callback) {
      var json;
      json = {};
      json.name = name;
      json.description = description;
      json.due_on = due_on;
      json.is_completed = is_completed;
      return this.addCommand("update_milestone/", milestone_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.deleteMilestone = function(milestone_id, callback) {
      return this.closeCommand("delete_milestone/", milestone_id, callback);
    };

    TestRail.prototype.getPlan = function(plan_id, callback) {
      return this.getIdCommand("get_plan/", plan_id, callback);
    };

    TestRail.prototype.getPlans = function(project_id, callback) {
      return this.getIdCommand("get_plans/", project_id, callback);
    };

    TestRail.prototype.addPlan = function(project_id, name, description, milestone_id, callback) {
      var json;
      json = {};
      json.name = name;
      json.description = description;
      json.milestone_id = milestone_id;
      return this.addCommand("add_plan/", project_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.addPlanEntry = function(plan_id, suite_id, name, assignedto_id, include_all, case_ids, callback) {
      var json;
      json = {};
      json.suite_id = suite_id;
      json.case_ids = case_ids;
      json.name = name;
      json.assignedto_id = assignedto_id;
      json.include_all = include_all;
      return this.addCommand("add_plan_entry/", plan_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.updatePlan = function(plan_id, name, description, milestone_id, callback) {
      var json;
      json = {};
      json.name = name;
      json.description = description;
      json.milestone_id = milestone_id;
      return this.addCommand("update_plan/", plan_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.updatePlanEntry = function(plan_id, entry_id, name, assignedto_id, include_all, callback) {
      var json;
      json = {};
      json.name = name;
      json.assignedto_id = assignedto_id;
      json.include_all = include_all;
      return this.addCommand("update_plan_entry/", plan_id + "/" + entry_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.closePlan = function(plan_id, callback) {
      return this.closeCommand("close_plan/", plan_id, callback);
    };

    TestRail.prototype.deletePlan = function(plan_id, callback) {
      return this.closeCommand("delete_plan/", plan_id, callback);
    };

    TestRail.prototype.deletePlanEntry = function(plan_id, entry_id, callback) {
      return this.closeCommand("delete_plan_entry/", plan_id + "/" + entry_id, callback);
    };

    TestRail.prototype.getPriorities = function(callback) {
      return this.getCommand("get_priorities/", callback);
    };

    TestRail.prototype.getProject = function(project_id, callback) {
      return this.getIdCommand("get_project/", project_id, callback);
    };

    TestRail.prototype.getProjects = function(callback) {
      return this.getCommand("get_projects/", callback);
    };

    TestRail.prototype.addProject = function(name, announcement, show_announcement, callback) {
      var json;
      json = {};
      json.name = name;
      json.announcement = announcement;
      json.show_announcement = show_announcement;
      return this.addCommand("add_project/", "", JSON.stringify(json), callback);
    };

    TestRail.prototype.updateProject = function(project_id, name, announcement, show_announcement, is_completed, callback) {
      var json;
      json = {};
      json.name = name;
      json.announcement = announcement;
      json.show_announcement = show_announcement;
      json.is_completed = is_completed;
      return this.addCommand("add_project/", project_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.deleteProject = function(project_id, callback) {
      return this.closeCommand("delete_project/", project_id, callback);
    };

    TestRail.prototype.getResults = function(test_id, callback, limit) {
      var extra;
      if (limit == null) {
        return this.getIdCommand("get_results/", test_id, callback);
      } else {
        extra = "&limit=" + limit;
        return this.getExtraCommand("get_results/", test_id, extra, callback);
      }
    };

    TestRail.prototype.getResultsForCase = function(run_id, case_id, limit, callback) {
      var extra;
      if (limit == null) {
        extra = "/" + case_id;
        return this.getExtraCommand("get_results_for_case/", run_id, extra, callback);
      } else {
        extra = "/" + case_id + "&limit=" + limit;
        return this.getExtraCommand("get_results_for_case/", run_id, extra, callback);
      }
    };

    TestRail.prototype.addResult = function(test_id, status_id, comment, version, elapsed, defects, assignedto_id, callback) {
      var json;
      json = {};
      json.status_id = status_id;
      json.comment = comment;
      json.version = version;
      json.elapsed = elapsed;
      json.defects = defects;
      json.assignedto_id = assignedto_id;
      return this.addCommand("add_result/", test_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.addResults = function(run_id, results, callback) {
      return this.addExtraCommand("add_results/", run_id, JSON.stringify(results), callback);
    };

    TestRail.prototype.addResultForCase = function(run_id, case_id, status_id, comment, version, elapsed, defects, assignedto_id, callback) {
      var json;
      json = {};
      json.status_id = status_id;
      json.comment = comment;
      json.version = version;
      json.elapsed = elapsed;
      json.defects = defects;
      json.assignedto_id = assignedto_id;
      return this.addExtraCommand("add_result_for_case/", run_id, "/" + case_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.addResultsForCases = function(run_id, results, callback) {
      return this.addExtraCommand("add_results_for_cases/", run_id, "", JSON.stringify(results), callback);
    };

    TestRail.prototype.getResultFields = function(callback) {
      return this.getIdCommand("get_result_fields/", "", callback);
    };

    TestRail.prototype.getRun = function(run_id, callback) {
      return this.getIdCommand("get_run/", run_id, callback);
    };

    TestRail.prototype.getRuns = function(run_id, callback) {
      return this.getIdCommand("get_runs/", run_id, callback);
    };

    TestRail.prototype.addRun = function(projectID, suite_id, name, description, milestone_id, callback) {
      var json;
      json = {};
      json.suite_id = suite_id;
      json.name = name;
      json.description = description;
      json.milestone_id = milestone_id;
      return this.addCommand("add_run/", projectID, JSON.stringify(json), callback);
    };

    TestRail.prototype.updateRun = function(runID, name, description, callback) {
      var json;
      json = {};
      json.name = name;
      json.description = description;
      return this.addCommand("update_run/", runID, JSON.stringify(json), callback);
    };

    TestRail.prototype.closeRun = function(run_id, callback) {
      return this.closeCommand("close_run/", run_id, callback);
    };

    TestRail.prototype.deleteRun = function(run_id, callback) {
      return this.closeCommand("delete_run/", run_id, callback);
    };

    TestRail.prototype.getStatuses = function(callback) {
      return this.getCommand("get_statuses/", callback);
    };

    TestRail.prototype.getSection = function(section_id, callback) {
      return this.getIdCommand("get_section/", section_id, callback);
    };

    TestRail.prototype.getSections = function(project_id, suite_id, callback) {
      return this.getExtraCommand("get_sections/", project_id, "&suite_id=" + suite_id, callback);
    };

    TestRail.prototype.addSection = function(project_id, suite_id, parent_id, name, callback) {
      var json;
      json = {};
      json.suite_id = suite_id;
      json.parent_id = parent_id;
      json.name = name;
      return this.addCommand("add_section/", project_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.updateSection = function(section_id, name, callback) {
      var json;
      json = {};
      json.name = name;
      return this.addCommand("update_Section/", section_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.deleteSection = function(section_id, callback) {
      return this.closeCommand("delete_section/", section_id, callback);
    };

    TestRail.prototype.getSuite = function(suite_id, callback) {
      return this.getIdCommand("get_suite/", suite_id, callback);
    };

    TestRail.prototype.getSuites = function(project_id, callback) {
      return this.getIdCommand("get_suites/", project_id, callback);
    };

    TestRail.prototype.addSuite = function(project_id, name, description, callback) {
      var json;
      json = {};
      json.name = name;
      json.description = description;
      return this.addCommand("add_suite/", project_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.updateSuite = function(suite_id, name, description, callback) {
      var json;
      json = {};
      json.name = name;
      json.description = description;
      return this.addCommand("update_suite/", suite_id, JSON.stringify(json), callback);
    };

    TestRail.prototype.deleteSuite = function(suite_id, callback) {
      return this.closeCommand("delete_suite/", suite_id, callback);
    };

    TestRail.prototype.getTest = function(test_id, callback) {
      return this.getIdCommand("get_test/", test_id, callback);
    };

    TestRail.prototype.getTests = function(run_id, callback) {
      return this.getIdCommand("get_tests/", run_id, callback);
    };

    TestRail.prototype.getUser = function(user_id, callback) {
      return this.getIdCommand("get_user/", user_id, callback);
    };

    TestRail.prototype.getUserByEmail = function(email, callback) {
      return this.getExtraCommand("", "", "get_user_by_email&email=" + email, callback);
    };

    TestRail.prototype.getUsers = function(callback) {
      return this.getCommand("get_users/", callback);
    };

    return TestRail;

  })();

  module.exports = TestRail;

}).call(this);
